<?php

/**
 * @file
 * Gives site visitors the ability to log in with GitHub (http://github.com).
 */

/**
 * Implements hook_config_info().
 */
function github_connect_config_info() {
  $prefixes['github_connect.settings'] = array(
    'label' => t('github_connect settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

/**
 * Implements hook_menu().
 */
function github_connect_menu() {
  // Admin settings page.
  $items['admin/config/people/github'] = array(
    'title' => 'Github settings',
    'description' => 'Settings for connecting with Github.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('github_connect_admin_settings_form'),
    'access arguments' => array('administer github_connect'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'github_connect.admin.inc',
  );
  // Callback for oauth token request from Github API.
  $items['github/register/create'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Connected to Github',
    'page callback' => 'github_connect_get_access_token',
    'access callback' => TRUE,
    'file' => 'github_connect.pages.inc',
  );
  $items['user/%user/github'] = array(
    'title' => 'Github account',
    'page callback' => 'github_user_account',
    'page arguments' => array(1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'github_connect.pages.inc',
  );
  $items['user/%user/github/delete'] = array(
    'title' => 'Disconnect Github account',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('github_connect_user_delete_form', 1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'file' => 'github_connect.pages.inc',
  );
  $items['github/verify/email/%user/%'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Merge accounts',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('github_connect_verify_email_form', 3, 4),
    'access callback' => TRUE,
    'file' => 'github_connect.pages.inc',
  );
  $items['github/username/%user/%'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Choose your username',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('github_connect_username_choose_form', 2, 3),
    'access callback' => TRUE,
    'file' => 'github_connect.pages.inc',
  );

  return $items;
}

function github_connect_hook_info() {
  $hooks['github_added'] = array(
    'group' => 'github',
  );
  $hooks['github_removed'] = array(
    'group' => 'github',
  );
  return $hooks;
}


/**
 * Implements hook_block_info().
 */
function github_connect_block_info() {
  $blocks['github_connect-login'] = array(
    'info' => t('Github connect'),
  );

  return $blocks;
}


/**
 * Implements hook_block_view().
 */
function github_connect_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'github_connect-login':
      return array(
        'subject' => '',
        'content' => github_connect_connect_block(),
      );
      break;

  }
  return $block;
}

/**
 * GitHub connect block.
 */
function github_connect_connect_block() {
  global $base_url;

  if (user_is_logged_in()) {
    return FALSE;
  }

  $client_id = config_get('github_connect.settings', 'github_connect_client_id');
  $destination = user_login_destination();
  $link = 'https://github.com/login/oauth/authorize?client_id=' . $client_id . '&scope=user,public&redirect_uri=' . urlencode($base_url . '/github/register/create?destination=' . $destination['destination']);
  $output = l(t('Login with GitHub'), $link);

  return $output;
}

/**
 * Implements hook_user_delete().
 */
function github_connect_user_delete($account) {
  module_load_include('inc', 'github_connect');

  // Delete the user from github_connect_users table.
  if (github_connect_get_user_token($account->uid)) {
    db_delete('github_connect_users')
      ->condition('uid', $account->uid)
      ->execute();
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function github_connect_form_user_login_block_alter(&$form, &$form_state) {
  _github_connect_user_login_form_alter($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function github_connect_form_user_login_alter(&$form, &$form_state) {
  _github_connect_user_login_form_alter($form, $form_state);
}

function _github_connect_user_login_form_alter(&$form, &$form_state) {
  $form['#attached']['css'][] = backdrop_get_path('module', 'github_connect') . '/github_connect.css';

  $items = array();
  $items[] = array(
    'data' => github_connect_connect_block(),
    'class' => array('github-link'),
  );

  $form['github_links'] = array(
    '#theme' => 'item_list',
    '#items' => $items,
    '#attributes' => array('class' => array('github-links')),
    '#weight' => 1,
  );
  $form['github_connect.return_to'] = array('#type' => 'hidden', '#value' => url('openid/authenticate', array('absolute' => TRUE, 'query' => user_login_destination())));
}



/**
 * Discover which external authentication module(s) authenticated a username.
 *
 * @param $authname
 *   A username used by an external authentication module.
 * @return
 *   An associative array with module as key and username as value.
 */
function user_get_authmaps($authname = NULL) {
  $authmaps = db_query("SELECT module, authname FROM {authmap} WHERE authname = :authname", array(':authname' => $authname))->fetchAllKeyed();
  return count($authmaps) ? $authmaps : 0;
}

/**
 * Save mappings of which external authentication module(s) authenticated
 * a user. Maps external usernames to user ids in the users table.
 *
 * @param $account
 *   A user object.
 * @param $authmaps
 *   An associative array with a compound key and the username as the value.
 *   The key is made up of 'authname_' plus the name of the external authentication
 *   module.
 * @see user_external_login_register()
 */
function user_set_authmaps($account, $authmaps) {
  foreach ($authmaps as $key => $value) {
    $module = explode('_', $key, 2);
    if ($value) {
      db_merge('authmap')
        ->key(array(
          'uid' => $account->uid,
          'module' => $module[1],
        ))
        ->fields(array('authname' => $value))
        ->execute();
    }
    else {
      db_delete('authmap')
        ->condition('uid', $account->uid)
        ->condition('module', $module[1])
        ->execute();
    }
  }
}
